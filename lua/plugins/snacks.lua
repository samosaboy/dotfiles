return {
   {
    "snacks.nvim",
    opts = {
      picker = { enabled = false },
      explorer = { enabled = false },
      terminal = { enabled = false },
      scroll = {
        enabled = true,
        animate = {
          duration = { step = 15, total = 250 },
          easing = "linear",
        },
        -- faster animation when repeating scroll after delay
        animate_repeat = {
          delay = 100, -- delay in ms before using the repeat animation
          duration = { step = 5, total = 50 },
          easing = "linear",
        },
        -- what buffers to animate
        filter = function(buf)
          return vim.g.snacks_scroll ~= false
            and vim.b[buf].snacks_scroll ~= false
            and vim.bo[buf].buftype ~= "terminal"
        end,
      },
--       dashboard = {
--         preset = {
--           header = [[
--     __               _            
--    / /_  ____  _____(_)___  ____ _
--   / __ \/ __ \/ ___/ / __ \/ __ `/
--  / /_/ / /_/ / /  / / / / / /_/ / 
-- /_.___/\____/_/  /_/_/ /_/\__, /  
--                          /____/   
--           ]],
--           keys = {
--             { icon = " ", key = "Ctrl-p", desc = "Find File", action = ":lua Snacks.dashboard.pick('files')" },
--             { icon = " ", key = "n", desc = "New File", action = ":ene | startinsert" },
--             { icon = " ", key = "Ctrl-f", desc = "Find Text", action = ":lua Snacks.dashboard.pick('live_grep')" },
--             {
--               icon = " ",
--               key = "Space-f-o",
--               desc = "Recent Files",
--               action = ":lua Snacks.dashboard.pick('oldfiles')",
--             },
--             {
--               icon = " ",
--               key = "c",
--               desc = "Config",
--               action = ":lua Snacks.dashboard.pick('files', {cwd = vim.fn.stdpath('config')})",
--             },
--             { icon = " ", key = "x", desc = "Lazy Extras", action = ":LazyExtras" },
--             { icon = "󰒲 ", key = "l", desc = "Lazy", action = ":Lazy" },
--             { icon = " ", key = "q", desc = "Quit", action = ":qa" },
--           },
--         },
--       },
    },
  }
}

-- return {
--   "folke/snacks.nvim",
--   opts = {
--     debug = {
--       enabled = false,
--     },
--     -- picker = {
--     --   sources = {
--     --     explorer = {
--     --       layout = { layout = { position = "left" } },
--     --       win = {
--     --         list = {
--     --           keys = {
--     --             ["<ESC>"] = "",
--     --             ["w"] = "confirm",
--     --             ["l"] = "",
--     --             ["h"] = "",
--     --             ["C"] = "explorer_close",
--     --           },
--     --         },
--     --       },
--     --       ignored = false,
--     --       hidden = true,
--     --     },
--     --   },
--     --   icons = {
--     --     git = {
--     --       staged = "●",
--     --       added = "A",
--     --       deleted = "D",
--     --       ignored = "",
--     --       modified = "M",
--     --       renamed = "R",
--     --       untracked = "U",
--     --     },
--     --   },
--     -- },
--           scroll = {
--         enabled = true,
--         animate = {
--           duration = { step = 15, total = 250 },
--           easing = "linear",
--         },
--         -- faster animation when repeating scroll after delay
--         animate_repeat = {
--           delay = 100, -- delay in ms before using the repeat animation
--           duration = { step = 5, total = 50 },
--           easing = "linear",
--         },
--         -- what buffers to animate
--         filter = function(buf)
--           return vim.g.snacks_scroll ~= false
--             and vim.b[buf].snacks_scroll ~= false
--             and vim.bo[buf].buftype ~= "terminal"
--         end,
--       },
--     indent = {
--       indent = { enabled = false, char = "▏" },
--       scope = {
--         enabled = true,
--         char = "▏",
--         underline = false,
--         only_current = true,
--         hl = {
--           "RainbowDelimiterRed",
--           "RainbowDelimiterYellow",
--           "RainbowDelimiterBlue",
--           "RainbowDelimiterCyan",
--           "RainbowDelimiterOrange",
--           "RainbowDelimiterGreen",
--           "RainbowDelimiterViolet",
--         },
--       },
--     },
--     zen = {
--       win = {
--         backdrop = {
--           transparent = true,
--         },
--       },
--       toggles = {
--         dim = false,
--       },
--     },
--    picker = { enabled = false },
--     explorer = { enabled = false },
--     terminal = { enabled = false },
--     gitbrowse = {},
--     image = {},
--     zoom = {},
--   },
--   keys = {
--     -- {
--     --   "<C-n>",
--     --   function()
--     --     Snacks.picker.explorer()
--     --   end,
--     --   desc = "Explorer Snacks",
--     -- },
--     -- {
--     --   "<leader>,",
--     --   function()
--     --     Snacks.picker.buffers()
--     --   end,
--     --   desc = "Buffers",
--     -- },
--     -- {
--     --   "<leader>/",
--     --   function()
--     --     Snacks.picker.grep()
--     --   end,
--     --   desc = "Grep",
--     -- },
--     -- {
--     --   "<leader>:",
--     --   function()
--     --     Snacks.picker.command_history()
--     --   end,
--     --   desc = "Command History",
--     -- },
--     -- {
--     --   "<leader><space>",
--     --   function()
--     --     Snacks.picker.files()
--     --   end,
--     --   desc = "Find Files",
--     -- },
--     -- -- find
--     -- {
--     --   "<leader>fb",
--     --   function()
--     --     Snacks.picker.buffers()
--     --   end,
--     --   desc = "Buffers",
--     -- },
--     -- {
--     --   "<leader>fc",
--     --   function()
--     --     Snacks.picker.files({ cwd = vim.fn.stdpath("config") })
--     --   end,
--     --   desc = "Find Config File",
--     -- },
--     -- {
--     --   "<leader>ff",
--     --   function()
--     --     Snacks.picker.files()
--     --   end,
--     --   desc = "Find Files",
--     -- },
--     -- {
--     --   "<leader>fg",
--     --   function()
--     --     Snacks.picker.git_files()
--     --   end,
--     --   desc = "Find Git Files",
--     -- },
--     -- {
--     --   "<leader>fr",
--     --   function()
--     --     Snacks.picker.recent()
--     --   end,
--     --   desc = "Recent",
--     -- },
--     -- -- git
--     -- {
--     --   "<leader>gc",
--     --   function()
--     --     Snacks.picker.git_log()
--     --   end,
--     --   desc = "Git Log",
--     -- },
--     -- {
--     --   "<leader>gs",
--     --   function()
--     --     Snacks.picker.git_status()
--     --   end,
--     --   desc = "Git Status",
--     -- },
--     -- -- Grep
--     -- {
--     --   "<leader>sb",
--     --   function()
--     --     Snacks.picker.lines()
--     --   end,
--     --   desc = "Buffer Lines",
--     -- },
--     -- {
--     --   "<leader>sB",
--     --   function()
--     --     Snacks.picker.grep_buffers()
--     --   end,
--     --   desc = "Grep Open Buffers",
--     -- },
--     -- {
--     --   "<leader>sg",
--     --   function()
--     --     Snacks.picker.grep()
--     --   end,
--     --   desc = "Grep",
--     -- },
--     -- {
--     --   "<leader>sw",
--     --   function()
--     --     Snacks.picker.grep_word()
--     --   end,
--     --   desc = "Visual selection or word",
--     --   mode = { "n", "x" },
--     -- },
--     -- -- search
--     -- {
--     --   '<leader>s"',
--     --   function()
--     --     Snacks.picker.registers()
--     --   end,
--     --   desc = "Registers",
--     -- },
--     -- {
--     --   "<leader>sa",
--     --   function()
--     --     Snacks.picker.autocmds()
--     --   end,
--     --   desc = "Autocmds",
--     -- },
--     -- {
--     --   "<leader>sc",
--     --   function()
--     --     Snacks.picker.command_history()
--     --   end,
--     --   desc = "Command History",
--     -- },
--     -- {
--     --   "<leader>sC",
--     --   function()
--     --     Snacks.picker.commands()
--     --   end,
--     --   desc = "Commands",
--     -- },
--     -- {
--     --   "<leader>sd",
--     --   function()
--     --     Snacks.picker.diagnostics()
--     --   end,
--     --   desc = "Diagnostics",
--     -- },
--     -- {
--     --   "<leader>sh",
--     --   function()
--     --     Snacks.picker.help()
--     --   end,
--     --   desc = "Help Pages",
--     -- },
--     -- {
--     --   "<leader>sH",
--     --   function()
--     --     Snacks.picker.highlights()
--     --   end,
--     --   desc = "Highlights",
--     -- },
--     -- {
--     --   "<leader>sj",
--     --   function()
--     --     Snacks.picker.jumps()
--     --   end,
--     --   desc = "Jumps",
--     -- },
--     -- {
--     --   "<leader>sk",
--     --   function()
--     --     Snacks.picker.keymaps()
--     --   end,
--     --   desc = "Keymaps",
--     -- },
--     -- {
--     --   "<leader>sl",
--     --   function()
--     --     Snacks.picker.loclist()
--     --   end,
--     --   desc = "Location List",
--     -- },
--     -- {
--     --   "<leader>sM",
--     --   function()
--     --     Snacks.picker.man()
--     --   end,
--     --   desc = "Man Pages",
--     -- },
--     -- {
--     --   "<leader>sm",
--     --   function()
--     --     Snacks.picker.marks()
--     --   end,
--     --   desc = "Marks",
--     -- },
--     -- {
--     --   "<leader>sR",
--     --   function()
--     --     Snacks.picker.resume()
--     --   end,
--     --   desc = "Resume",
--     -- },
--     -- {
--     --   "<leader>sq",
--     --   function()
--     --     Snacks.picker.qflist()
--     --   end,
--     --   desc = "Quickfix List",
--     -- },
--     -- {
--     --   "<leader>uC",
--     --   function()
--     --     Snacks.picker.colorschemes()
--     --   end,
--     --   desc = "Colorschemes",
--     -- },
--     -- {
--     --   "<leader>qp",
--     --   function()
--     --     Snacks.picker.projects()
--     --   end,
--     --   desc = "Projects",
--     -- },
--     -- -- LSP
--     -- {
--     --   "gd",
--     --   function()
--     --     Snacks.picker.lsp_definitions()
--     --   end,
--     --   desc = "Goto Definition",
--     -- },
--     -- {
--     --   "gr",
--     --   function()
--     --     Snacks.picker.lsp_references()
--     --   end,
--     --   nowait = true,
--     --   desc = "References",
--     -- },
--     -- {
--     --   "gI",
--     --   function()
--     --     Snacks.picker.lsp_implementations()
--     --   end,
--     --   desc = "Goto Implementation",
--     -- },
--     -- {
--     --   "gy",
--     --   function()
--     --     Snacks.picker.lsp_type_definitions()
--     --   end,
--     --   desc = "Goto T[y]pe Definition",
--     -- },
--     -- {
--     --   "<leader>ss",
--     --   function()
--     --     Snacks.picker.lsp_symbols()
--     --   end,
--     --   desc = "LSP Symbols",
--     -- },
--     -- {
--     --   "<D-S-f>",
--     --   function()
--     --     Snacks.zen.zoom()
--     --   end,
--     --   desc = "Zoom",
--     -- },
--   },
-- }
